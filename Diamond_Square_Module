import numpy as np
import random

def Diamond_Square(n=8,h=0.85,seed=None,r=100):
    """
    n>0 is used for calculating dimension & #iterations (default n=8, recommended 5<n<10)
    h dictates the iterative random scaling, 0<h<1, lower=rougher (default h=0.85)
    seed allows for data reproducibility (default seed=None so random if not given)
    r is the initial range of random integer values (default r=100)
    """
    def Diamond(t):
        ct_d = 2**(2*(t-1)) # total cells to update for iteration t
        
        for x in range(0,int(np.sqrt(ct_d))):
            for y in range(0,int(np.sqrt(ct_d))):
                
                A[e+x*m][e+y*m] = ( (A[x*m][y*m]
                                     +A[x*m][(y+1)*m]
                                     +A[(x+1)*m][y*m]
                                     +A[(x+1)*m][(y+1)*m]) / 4
                                     +random.randint(-r,r)) 

    def Square(t):
        
        for a in range(0,2**(t-1)):
            for b in range(0,2**(t-1)+1):
                
                    #a cols and b rows
                    c = [] #north, south, west, east
                    
                    if b*m != 0 :
                        c.append(A[b*m-e][a*m+e])
                    if b*m != (d-1):
                        c.append(A[b*m+e][a*m+e])
                    if (a*m+e) != 0:
                        c.append(A[b*m][a*m])
                    if (a*m+e) != (d-1):
                        c.append(A[b*m][(a+1)*m])
                    
                    A[b*m][a*m+e] =  ( (sum(c))/len(c)
                                         +random.randint(-r,r)) 
                                      
                    #a rows and b cols
                    c = [] #north, south, west, east
                    
                    if a*m+e != 0 :
                        c.append(A[a*m][b*m])
                    if a*m+e != (d-1):
                        c.append(A[(a+1)*m][b*m])
                    if b*m != 0:
                        c.append(A[a*m+e][b*m-e])
                    if b*m != (d-1):
                        c.append(A[a*m+e][b*m+e])
                    
                    A[a*m+e][b*m] =  ( (sum(c))/len(c)
                                         +random.randint(-r,r)) 
    
    #sets dimension of the square dxd matrix, the random seed if provided
    d = 2**n+1
    random.seed(seed) 
    
    #Create initial 2D heightmap array
    A = np.zeros((d,d))
    
    #Set the corner values of the initial array
    for a in range(0,2):
        for b in range(0,2):
            A[a*(d-1)][b*(d-1)] = 2**(-h)*random.randint(-r,r) + r #scale start height
    
    #iteration number t ranges from 1 to n (including)
    for t in range(1,n+1):
        
        #for each t, calculate magnitude between target elements (e is half m)
        m = int( (d-1) / 2**(t-1) )
        e = int( m/2 )
        
        Diamond(t)
        Square(t)
        
        #Scale down random range per iteration
        r = int(r/(2**h))
    
    return A

#p=(8,0.85,2,100)
#A = Diamond_Square(*p)
